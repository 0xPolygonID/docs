name: Polygon ID Docs Staging Deployment
on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  deploy_staging:
    name: Staging Deployment
    permissions:
      id-token: write
      contents: write
    environment: staging
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-1
      ECR_REPOSITORY: devs-staging-ecr
      ECS_SERVICE: devs-staging-ecs-service
      ECS_CLUSTER: frontend-staging-ecs-cluster
      ECS_TASK_DEFINITION: staging-taskdef.json
      CONTAINER_NAME: devs-staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::021594655844:role/devs-staging-GithubActionsRole
          role-session-name: GithubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: INSTALL
        run: rm -rf node_modules && yarn install --immutable --immutable-cache --check-cache

      # Runs a single command using the runners shell
      - name: Build
        run: yarn build

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # - name: Cloudflare Cache Purge
      #   uses: nathanvaughn/actions-cloudflare-purge@master
      #   with:
      #     cf_zone: ${{ secrets.CLOUDFLARE_ZONE }}
      #     cf_auth: ${{ secrets.CLOUDFLARE_AUTH_KEY }}
      #     hosts: devs-staging.polygonid.com
